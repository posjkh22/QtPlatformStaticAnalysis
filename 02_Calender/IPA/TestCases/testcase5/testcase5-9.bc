; ModuleID = 'testcase5-9.c'
source_filename = "testcase5-9.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@gv = global i32 1, align 4, !dbg !0
@a = global i32 0, align 4, !dbg !9

; Function Attrs: noinline nounwind optnone uwtable
define i32* @fnc1(i32*) #0 !dbg !15 {
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !18, metadata !19), !dbg !20
  call void @llvm.dbg.declare(metadata i32** %3, metadata !21, metadata !19), !dbg !22
  %4 = load i32*, i32** %2, align 8, !dbg !23
  store i32* %4, i32** %3, align 8, !dbg !22
  %5 = load i32*, i32** %3, align 8, !dbg !24
  ret i32* %5, !dbg !25
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define i32* @fnc2(i32*, i32*) #0 !dbg !26 {
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  store i32* %0, i32** %3, align 8
  call void @llvm.dbg.declare(metadata i32** %3, metadata !29, metadata !19), !dbg !30
  store i32* %1, i32** %4, align 8
  call void @llvm.dbg.declare(metadata i32** %4, metadata !31, metadata !19), !dbg !32
  %5 = load i32*, i32** %3, align 8, !dbg !33
  ret i32* %5, !dbg !34
}

; Function Attrs: noinline nounwind optnone uwtable
define void @fnc3(i32*, i32*) #0 !dbg !35 {
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  store i32* %0, i32** %3, align 8
  call void @llvm.dbg.declare(metadata i32** %3, metadata !38, metadata !19), !dbg !39
  store i32* %1, i32** %4, align 8
  call void @llvm.dbg.declare(metadata i32** %4, metadata !40, metadata !19), !dbg !41
  call void @llvm.dbg.declare(metadata i32* %5, metadata !42, metadata !19), !dbg !43
  store i32 0, i32* %5, align 4, !dbg !43
  %6 = load i32*, i32** %3, align 8, !dbg !44
  %7 = bitcast i32* %6 to i8*, !dbg !44
  call void @free(i8* %7) #3, !dbg !45
  %8 = load i32*, i32** %4, align 8, !dbg !46
  %9 = bitcast i32* %8 to i8*, !dbg !46
  call void @free(i8* %9) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: nounwind
declare void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define void @c1() #0 !dbg !49 {
  %1 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %1, metadata !52, metadata !19), !dbg !53
  store i32 0, i32* %1, align 4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: noinline nounwind optnone uwtable
define void @c2() #0 !dbg !55 {
  %1 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %1, metadata !56, metadata !19), !dbg !57
  store i32 0, i32* %1, align 4, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: noinline nounwind optnone uwtable
define void @c3() #0 !dbg !59 {
  %1 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %1, metadata !60, metadata !19), !dbg !61
  store i32 0, i32* %1, align 4, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @main() #0 !dbg !63 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i32*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32** %2, metadata !66, metadata !19), !dbg !67
  call void @llvm.dbg.declare(metadata i32** %3, metadata !68, metadata !19), !dbg !69
  call void @llvm.dbg.declare(metadata i32** %4, metadata !70, metadata !19), !dbg !71
  call void @llvm.dbg.declare(metadata i32* %5, metadata !72, metadata !19), !dbg !73
  store i32 0, i32* %5, align 4, !dbg !73
  call void @llvm.dbg.declare(metadata i32* %6, metadata !74, metadata !19), !dbg !75
  store i32 1, i32* %6, align 4, !dbg !75
  call void @llvm.dbg.declare(metadata i32* %7, metadata !76, metadata !19), !dbg !77
  store i32 2, i32* %7, align 4, !dbg !77
  call void @llvm.dbg.declare(metadata i32** %8, metadata !78, metadata !19), !dbg !79
  %12 = load i32, i32* %5, align 4, !dbg !80
  %13 = icmp eq i32 %12, 0, !dbg !82
  br i1 %13, label %14, label %38, !dbg !83

; <label>:14:                                     ; preds = %0
  call void @llvm.dbg.declare(metadata i32** %9, metadata !84, metadata !19), !dbg !86
  %15 = call noalias i8* @malloc(i64 4) #3, !dbg !87
  %16 = bitcast i8* %15 to i32*, !dbg !88
  store i32* %16, i32** %9, align 8, !dbg !86
  call void @llvm.dbg.declare(metadata i32** %10, metadata !89, metadata !19), !dbg !90
  %17 = call noalias i8* @malloc(i64 4) #3, !dbg !91
  %18 = bitcast i8* %17 to i32*, !dbg !92
  store i32* %18, i32** %10, align 8, !dbg !90
  call void @llvm.dbg.declare(metadata i32** %11, metadata !93, metadata !19), !dbg !94
  %19 = call noalias i8* @malloc(i64 4) #3, !dbg !95
  %20 = bitcast i8* %19 to i32*, !dbg !96
  store i32* %20, i32** %11, align 8, !dbg !94
  %21 = load i32, i32* %6, align 4, !dbg !97
  %22 = icmp eq i32 %21, 0, !dbg !99
  br i1 %22, label %23, label %28, !dbg !100

; <label>:23:                                     ; preds = %14
  call void @c1(), !dbg !101
  %24 = load i32*, i32** %9, align 8, !dbg !103
  %25 = call i32* @fnc1(i32* %24), !dbg !104
  store i32* %25, i32** %8, align 8, !dbg !105
  %26 = load i32*, i32** %8, align 8, !dbg !106
  %27 = bitcast i32* %26 to i8*, !dbg !106
  call void @free(i8* %27) #3, !dbg !107
  br label %37, !dbg !108

; <label>:28:                                     ; preds = %14
  call void @c2(), !dbg !109
  %29 = load i32*, i32** %9, align 8, !dbg !111
  %30 = call i32* @fnc1(i32* %29), !dbg !112
  store i32* %30, i32** %8, align 8, !dbg !113
  %31 = load i32*, i32** %8, align 8, !dbg !114
  %32 = bitcast i32* %31 to i8*, !dbg !114
  call void @free(i8* %32) #3, !dbg !115
  %33 = load i32*, i32** %10, align 8, !dbg !116
  %34 = load i32*, i32** %11, align 8, !dbg !117
  call void @fnc3(i32* %33, i32* %34), !dbg !118
  %35 = load i32*, i32** %11, align 8, !dbg !119
  %36 = bitcast i32* %35 to i8*, !dbg !119
  call void @free(i8* %36) #3, !dbg !120
  br label %37

; <label>:37:                                     ; preds = %28, %23
  br label %41, !dbg !121

; <label>:38:                                     ; preds = %0
  call void @c3(), !dbg !122
  %39 = load i32*, i32** %2, align 8, !dbg !124
  %40 = bitcast i32* %39 to i8*, !dbg !124
  call void @free(i8* %40) #3, !dbg !125
  br label %41

; <label>:41:                                     ; preds = %38, %37
  ret i32 0, !dbg !126
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1)
!1 = distinct !DIGlobalVariable(name: "gv", scope: !2, file: !3, line: 6, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 5.0.0 (tags/RELEASE_500/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !8)
!3 = !DIFile(filename: "testcase5-9.c", directory: "/home/posjkh/ResearchSubjects/StaticAnalysis/InterProceduralAnalysis/IPAnalysis/IP-04/TestCases/testcase5")
!4 = !{}
!5 = !{!6}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{!0, !9}
!9 = !DIGlobalVariableExpression(var: !10)
!10 = distinct !DIGlobalVariable(name: "a", scope: !2, file: !3, line: 7, type: !7, isLocal: false, isDefinition: true)
!11 = !{i32 2, !"Dwarf Version", i32 4}
!12 = !{i32 2, !"Debug Info Version", i32 3}
!13 = !{i32 1, !"wchar_size", i32 4}
!14 = !{!"clang version 5.0.0 (tags/RELEASE_500/final)"}
!15 = distinct !DISubprogram(name: "fnc1", scope: !3, file: !3, line: 10, type: !16, isLocal: false, isDefinition: true, scopeLine: 10, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!16 = !DISubroutineType(types: !17)
!17 = !{!6, !6}
!18 = !DILocalVariable(name: "ptr1", arg: 1, scope: !15, file: !3, line: 10, type: !6)
!19 = !DIExpression()
!20 = !DILocation(line: 10, column: 16, scope: !15)
!21 = !DILocalVariable(name: "a", scope: !15, file: !3, line: 12, type: !6)
!22 = !DILocation(line: 12, column: 7, scope: !15)
!23 = !DILocation(line: 12, column: 11, scope: !15)
!24 = !DILocation(line: 13, column: 9, scope: !15)
!25 = !DILocation(line: 13, column: 2, scope: !15)
!26 = distinct !DISubprogram(name: "fnc2", scope: !3, file: !3, line: 16, type: !27, isLocal: false, isDefinition: true, scopeLine: 16, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!27 = !DISubroutineType(types: !28)
!28 = !{!6, !6, !6}
!29 = !DILocalVariable(name: "ptr2", arg: 1, scope: !26, file: !3, line: 16, type: !6)
!30 = !DILocation(line: 16, column: 16, scope: !26)
!31 = !DILocalVariable(name: "ptr3", arg: 2, scope: !26, file: !3, line: 16, type: !6)
!32 = !DILocation(line: 16, column: 27, scope: !26)
!33 = !DILocation(line: 18, column: 9, scope: !26)
!34 = !DILocation(line: 18, column: 2, scope: !26)
!35 = distinct !DISubprogram(name: "fnc3", scope: !3, file: !3, line: 21, type: !36, isLocal: false, isDefinition: true, scopeLine: 21, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!36 = !DISubroutineType(types: !37)
!37 = !{null, !6, !6}
!38 = !DILocalVariable(name: "ptr2", arg: 1, scope: !35, file: !3, line: 21, type: !6)
!39 = !DILocation(line: 21, column: 16, scope: !35)
!40 = !DILocalVariable(name: "ptr3", arg: 2, scope: !35, file: !3, line: 21, type: !6)
!41 = !DILocation(line: 21, column: 27, scope: !35)
!42 = !DILocalVariable(name: "a", scope: !35, file: !3, line: 23, type: !7)
!43 = !DILocation(line: 23, column: 6, scope: !35)
!44 = !DILocation(line: 24, column: 7, scope: !35)
!45 = !DILocation(line: 24, column: 2, scope: !35)
!46 = !DILocation(line: 25, column: 7, scope: !35)
!47 = !DILocation(line: 25, column: 2, scope: !35)
!48 = !DILocation(line: 27, column: 1, scope: !35)
!49 = distinct !DISubprogram(name: "c1", scope: !3, file: !3, line: 29, type: !50, isLocal: false, isDefinition: true, scopeLine: 29, isOptimized: false, unit: !2, variables: !4)
!50 = !DISubroutineType(types: !51)
!51 = !{null}
!52 = !DILocalVariable(name: "a", scope: !49, file: !3, line: 30, type: !7)
!53 = !DILocation(line: 30, column: 6, scope: !49)
!54 = !DILocation(line: 31, column: 1, scope: !49)
!55 = distinct !DISubprogram(name: "c2", scope: !3, file: !3, line: 32, type: !50, isLocal: false, isDefinition: true, scopeLine: 32, isOptimized: false, unit: !2, variables: !4)
!56 = !DILocalVariable(name: "a", scope: !55, file: !3, line: 33, type: !7)
!57 = !DILocation(line: 33, column: 6, scope: !55)
!58 = !DILocation(line: 34, column: 1, scope: !55)
!59 = distinct !DISubprogram(name: "c3", scope: !3, file: !3, line: 35, type: !50, isLocal: false, isDefinition: true, scopeLine: 35, isOptimized: false, unit: !2, variables: !4)
!60 = !DILocalVariable(name: "a", scope: !59, file: !3, line: 36, type: !7)
!61 = !DILocation(line: 36, column: 6, scope: !59)
!62 = !DILocation(line: 37, column: 1, scope: !59)
!63 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 39, type: !64, isLocal: false, isDefinition: true, scopeLine: 39, isOptimized: false, unit: !2, variables: !4)
!64 = !DISubroutineType(types: !65)
!65 = !{!7}
!66 = !DILocalVariable(name: "ptr1", scope: !63, file: !3, line: 41, type: !6)
!67 = !DILocation(line: 41, column: 7, scope: !63)
!68 = !DILocalVariable(name: "ptr2", scope: !63, file: !3, line: 42, type: !6)
!69 = !DILocation(line: 42, column: 7, scope: !63)
!70 = !DILocalVariable(name: "ptr3", scope: !63, file: !3, line: 43, type: !6)
!71 = !DILocation(line: 43, column: 7, scope: !63)
!72 = !DILocalVariable(name: "a", scope: !63, file: !3, line: 45, type: !7)
!73 = !DILocation(line: 45, column: 6, scope: !63)
!74 = !DILocalVariable(name: "b", scope: !63, file: !3, line: 46, type: !7)
!75 = !DILocation(line: 46, column: 6, scope: !63)
!76 = !DILocalVariable(name: "c", scope: !63, file: !3, line: 47, type: !7)
!77 = !DILocation(line: 47, column: 6, scope: !63)
!78 = !DILocalVariable(name: "returnPtr", scope: !63, file: !3, line: 48, type: !6)
!79 = !DILocation(line: 48, column: 7, scope: !63)
!80 = !DILocation(line: 50, column: 6, scope: !81)
!81 = distinct !DILexicalBlock(scope: !63, file: !3, line: 50, column: 6)
!82 = !DILocation(line: 50, column: 8, scope: !81)
!83 = !DILocation(line: 50, column: 6, scope: !63)
!84 = !DILocalVariable(name: "ptr1", scope: !85, file: !3, line: 52, type: !6)
!85 = distinct !DILexicalBlock(scope: !81, file: !3, line: 50, column: 13)
!86 = !DILocation(line: 52, column: 8, scope: !85)
!87 = !DILocation(line: 52, column: 22, scope: !85)
!88 = !DILocation(line: 52, column: 15, scope: !85)
!89 = !DILocalVariable(name: "ptr2", scope: !85, file: !3, line: 53, type: !6)
!90 = !DILocation(line: 53, column: 8, scope: !85)
!91 = !DILocation(line: 53, column: 22, scope: !85)
!92 = !DILocation(line: 53, column: 15, scope: !85)
!93 = !DILocalVariable(name: "ptr3", scope: !85, file: !3, line: 54, type: !6)
!94 = !DILocation(line: 54, column: 8, scope: !85)
!95 = !DILocation(line: 54, column: 22, scope: !85)
!96 = !DILocation(line: 54, column: 15, scope: !85)
!97 = !DILocation(line: 56, column: 6, scope: !98)
!98 = distinct !DILexicalBlock(scope: !85, file: !3, line: 56, column: 6)
!99 = !DILocation(line: 56, column: 8, scope: !98)
!100 = !DILocation(line: 56, column: 6, scope: !85)
!101 = !DILocation(line: 59, column: 4, scope: !102)
!102 = distinct !DILexicalBlock(scope: !98, file: !3, line: 56, column: 13)
!103 = !DILocation(line: 60, column: 21, scope: !102)
!104 = !DILocation(line: 60, column: 16, scope: !102)
!105 = !DILocation(line: 60, column: 14, scope: !102)
!106 = !DILocation(line: 61, column: 9, scope: !102)
!107 = !DILocation(line: 61, column: 4, scope: !102)
!108 = !DILocation(line: 62, column: 3, scope: !102)
!109 = !DILocation(line: 67, column: 4, scope: !110)
!110 = distinct !DILexicalBlock(scope: !98, file: !3, line: 64, column: 7)
!111 = !DILocation(line: 68, column: 21, scope: !110)
!112 = !DILocation(line: 68, column: 16, scope: !110)
!113 = !DILocation(line: 68, column: 14, scope: !110)
!114 = !DILocation(line: 69, column: 9, scope: !110)
!115 = !DILocation(line: 69, column: 4, scope: !110)
!116 = !DILocation(line: 70, column: 9, scope: !110)
!117 = !DILocation(line: 70, column: 15, scope: !110)
!118 = !DILocation(line: 70, column: 4, scope: !110)
!119 = !DILocation(line: 71, column: 9, scope: !110)
!120 = !DILocation(line: 71, column: 4, scope: !110)
!121 = !DILocation(line: 74, column: 2, scope: !85)
!122 = !DILocation(line: 77, column: 3, scope: !123)
!123 = distinct !DILexicalBlock(scope: !81, file: !3, line: 75, column: 6)
!124 = !DILocation(line: 78, column: 8, scope: !123)
!125 = !DILocation(line: 78, column: 3, scope: !123)
!126 = !DILocation(line: 81, column: 2, scope: !63)
