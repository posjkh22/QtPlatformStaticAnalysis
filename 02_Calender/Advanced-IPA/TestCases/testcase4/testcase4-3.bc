; ModuleID = 'testcase4-3.c'
source_filename = "testcase4-3.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.file = type { i32 }

@a = global i32 0, align 4, !dbg !0
@g_file = common global %struct.file zeroinitializer, align 4, !dbg !6
@.str = private unnamed_addr constant [8 x i8] c"file.in\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define %struct.file* @fopen(i8*, i8*) #0 !dbg !17 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !23, metadata !24), !dbg !25
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !26, metadata !24), !dbg !27
  %5 = load i32, i32* @a, align 4, !dbg !28
  %6 = add nsw i32 %5, 1, !dbg !28
  store i32 %6, i32* @a, align 4, !dbg !28
  ret %struct.file* @g_file, !dbg !29
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define void @fclose(%struct.file*) #0 !dbg !30 {
  %2 = alloca %struct.file*, align 8
  store %struct.file* %0, %struct.file** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.file** %2, metadata !33, metadata !24), !dbg !34
  %3 = load i32, i32* @a, align 4, !dbg !35
  %4 = add nsw i32 %3, -1, !dbg !35
  store i32 %4, i32* @a, align 4, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: noinline nounwind optnone uwtable
define void @fnc3(%struct.file*) #0 !dbg !37 {
  %2 = alloca %struct.file*, align 8
  store %struct.file* %0, %struct.file** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.file** %2, metadata !38, metadata !24), !dbg !39
  %3 = load %struct.file*, %struct.file** %2, align 8, !dbg !40
  call void @fclose(%struct.file* %3), !dbg !41
  ret void, !dbg !42
}

; Function Attrs: noinline nounwind optnone uwtable
define void @fnc2(%struct.file*, %struct.file*) #0 !dbg !43 {
  %3 = alloca %struct.file*, align 8
  %4 = alloca %struct.file*, align 8
  %5 = alloca %struct.file*, align 8
  store %struct.file* %0, %struct.file** %3, align 8
  call void @llvm.dbg.declare(metadata %struct.file** %3, metadata !46, metadata !24), !dbg !47
  store %struct.file* %1, %struct.file** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.file** %4, metadata !48, metadata !24), !dbg !49
  %6 = load %struct.file*, %struct.file** %3, align 8, !dbg !50
  call void @fclose(%struct.file* %6), !dbg !51
  call void @llvm.dbg.declare(metadata %struct.file** %5, metadata !52, metadata !24), !dbg !53
  %7 = load %struct.file*, %struct.file** %4, align 8, !dbg !54
  store %struct.file* %7, %struct.file** %5, align 8, !dbg !53
  %8 = load %struct.file*, %struct.file** %5, align 8, !dbg !55
  call void @fnc3(%struct.file* %8), !dbg !56
  ret void, !dbg !57
}

; Function Attrs: noinline nounwind optnone uwtable
define void @fnc1(%struct.file*, %struct.file*) #0 !dbg !58 {
  %3 = alloca %struct.file*, align 8
  %4 = alloca %struct.file*, align 8
  %5 = alloca i32, align 4
  store %struct.file* %0, %struct.file** %3, align 8
  call void @llvm.dbg.declare(metadata %struct.file** %3, metadata !59, metadata !24), !dbg !60
  store %struct.file* %1, %struct.file** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.file** %4, metadata !61, metadata !24), !dbg !62
  call void @llvm.dbg.declare(metadata i32* %5, metadata !63, metadata !24), !dbg !64
  store i32 1, i32* %5, align 4, !dbg !64
  %6 = call %struct.file* @fopen(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0)), !dbg !65
  store %struct.file* %6, %struct.file** %4, align 8, !dbg !66
  %7 = load %struct.file*, %struct.file** %3, align 8, !dbg !67
  %8 = load %struct.file*, %struct.file** %4, align 8, !dbg !68
  call void @fnc2(%struct.file* %7, %struct.file* %8), !dbg !69
  ret void, !dbg !70
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @main() #0 !dbg !71 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.file*, align 8
  %3 = alloca %struct.file*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata %struct.file** %2, metadata !74, metadata !24), !dbg !75
  %4 = call %struct.file* @fopen(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0)), !dbg !76
  store %struct.file* %4, %struct.file** %2, align 8, !dbg !75
  call void @llvm.dbg.declare(metadata %struct.file** %3, metadata !77, metadata !24), !dbg !78
  %5 = load %struct.file*, %struct.file** %2, align 8, !dbg !79
  %6 = load %struct.file*, %struct.file** %3, align 8, !dbg !80
  call void @fnc1(%struct.file* %5, %struct.file* %6), !dbg !81
  store i32 0, i32* @a, align 4, !dbg !82
  ret i32 0, !dbg !83
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!13, !14, !15}
!llvm.ident = !{!16}

!0 = !DIGlobalVariableExpression(var: !1)
!1 = distinct !DIGlobalVariable(name: "a", scope: !2, file: !3, line: 9, type: !12, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 5.0.0 (tags/RELEASE_500/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5)
!3 = !DIFile(filename: "testcase4-3.c", directory: "/home/posjkh/ResearchSubjects/QtPlatformAnalysis/QtPlatformStaticAnalysis/02_Calender/Advanced-IPA/TestCases/testcase4")
!4 = !{}
!5 = !{!0, !6}
!6 = !DIGlobalVariableExpression(var: !7)
!7 = distinct !DIGlobalVariable(name: "g_file", scope: !2, file: !3, line: 10, type: !8, isLocal: false, isDefinition: true)
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3, line: 7, baseType: !9)
!9 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file", file: !3, line: 3, size: 32, elements: !10)
!10 = !{!11}
!11 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !9, file: !3, line: 5, baseType: !12, size: 32)
!12 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!13 = !{i32 2, !"Dwarf Version", i32 4}
!14 = !{i32 2, !"Debug Info Version", i32 3}
!15 = !{i32 1, !"wchar_size", i32 4}
!16 = !{!"clang version 5.0.0 (tags/RELEASE_500/final)"}
!17 = distinct !DISubprogram(name: "fopen", scope: !3, file: !3, line: 18, type: !18, isLocal: false, isDefinition: true, scopeLine: 18, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!18 = !DISubroutineType(types: !19)
!19 = !{!20, !21, !21}
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !22, size: 64)
!22 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!23 = !DILocalVariable(name: "in", arg: 1, scope: !17, file: !3, line: 18, type: !21)
!24 = !DIExpression()
!25 = !DILocation(line: 18, column: 19, scope: !17)
!26 = !DILocalVariable(name: "mod", arg: 2, scope: !17, file: !3, line: 18, type: !21)
!27 = !DILocation(line: 18, column: 29, scope: !17)
!28 = !DILocation(line: 20, column: 3, scope: !17)
!29 = !DILocation(line: 22, column: 2, scope: !17)
!30 = distinct !DISubprogram(name: "fclose", scope: !3, file: !3, line: 25, type: !31, isLocal: false, isDefinition: true, scopeLine: 25, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!31 = !DISubroutineType(types: !32)
!32 = !{null, !20}
!33 = !DILocalVariable(name: "in", arg: 1, scope: !30, file: !3, line: 25, type: !20)
!34 = !DILocation(line: 25, column: 19, scope: !30)
!35 = !DILocation(line: 27, column: 3, scope: !30)
!36 = !DILocation(line: 28, column: 1, scope: !30)
!37 = distinct !DISubprogram(name: "fnc3", scope: !3, file: !3, line: 30, type: !31, isLocal: false, isDefinition: true, scopeLine: 30, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!38 = !DILocalVariable(name: "fin2", arg: 1, scope: !37, file: !3, line: 30, type: !20)
!39 = !DILocation(line: 30, column: 17, scope: !37)
!40 = !DILocation(line: 32, column: 9, scope: !37)
!41 = !DILocation(line: 32, column: 2, scope: !37)
!42 = !DILocation(line: 34, column: 1, scope: !37)
!43 = distinct !DISubprogram(name: "fnc2", scope: !3, file: !3, line: 36, type: !44, isLocal: false, isDefinition: true, scopeLine: 36, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!44 = !DISubroutineType(types: !45)
!45 = !{null, !20, !20}
!46 = !DILocalVariable(name: "fin1", arg: 1, scope: !43, file: !3, line: 36, type: !20)
!47 = !DILocation(line: 36, column: 17, scope: !43)
!48 = !DILocalVariable(name: "fin2", arg: 2, scope: !43, file: !3, line: 36, type: !20)
!49 = !DILocation(line: 36, column: 29, scope: !43)
!50 = !DILocation(line: 38, column: 9, scope: !43)
!51 = !DILocation(line: 38, column: 2, scope: !43)
!52 = !DILocalVariable(name: "fin3", scope: !43, file: !3, line: 39, type: !20)
!53 = !DILocation(line: 39, column: 8, scope: !43)
!54 = !DILocation(line: 39, column: 15, scope: !43)
!55 = !DILocation(line: 40, column: 7, scope: !43)
!56 = !DILocation(line: 40, column: 2, scope: !43)
!57 = !DILocation(line: 41, column: 1, scope: !43)
!58 = distinct !DISubprogram(name: "fnc1", scope: !3, file: !3, line: 43, type: !44, isLocal: false, isDefinition: true, scopeLine: 43, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!59 = !DILocalVariable(name: "fin1", arg: 1, scope: !58, file: !3, line: 43, type: !20)
!60 = !DILocation(line: 43, column: 17, scope: !58)
!61 = !DILocalVariable(name: "fin2", arg: 2, scope: !58, file: !3, line: 43, type: !20)
!62 = !DILocation(line: 43, column: 29, scope: !58)
!63 = !DILocalVariable(name: "a", scope: !58, file: !3, line: 44, type: !12)
!64 = !DILocation(line: 44, column: 6, scope: !58)
!65 = !DILocation(line: 45, column: 10, scope: !58)
!66 = !DILocation(line: 45, column: 8, scope: !58)
!67 = !DILocation(line: 46, column: 7, scope: !58)
!68 = !DILocation(line: 46, column: 13, scope: !58)
!69 = !DILocation(line: 46, column: 2, scope: !58)
!70 = !DILocation(line: 47, column: 1, scope: !58)
!71 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 49, type: !72, isLocal: false, isDefinition: true, scopeLine: 49, isOptimized: false, unit: !2, variables: !4)
!72 = !DISubroutineType(types: !73)
!73 = !{!12}
!74 = !DILocalVariable(name: "fin1", scope: !71, file: !3, line: 51, type: !20)
!75 = !DILocation(line: 51, column: 8, scope: !71)
!76 = !DILocation(line: 51, column: 16, scope: !71)
!77 = !DILocalVariable(name: "fin2", scope: !71, file: !3, line: 52, type: !20)
!78 = !DILocation(line: 52, column: 8, scope: !71)
!79 = !DILocation(line: 54, column: 7, scope: !71)
!80 = !DILocation(line: 54, column: 13, scope: !71)
!81 = !DILocation(line: 54, column: 2, scope: !71)
!82 = !DILocation(line: 57, column: 4, scope: !71)
!83 = !DILocation(line: 59, column: 2, scope: !71)
